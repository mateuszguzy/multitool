version: "3.9"

services:
  multitool:
    build: .
    volumes:
      - type: bind
        source: ./logs
        target: /app/logs
      # volume needed to access the context files saved by zap
      # without re-launching the application
      - type: bind
        source: ./modules/zap/context_files
        target: /app/modules/zap/context_files
    depends_on:
      - zap
      - dvwa
      - redis
      - worker_main
      - worker_logging
      - worker_events
    env_file:
      - .env
    command: python main.py
    stdin_open: true
    tty: true

  zap:
    image: softwaresecurityproject/zap-stable:2.14.0
    command: zap.sh -daemon -host ${ZAP_URL} -port ${ZAP_PORT} -config api.addrs.addr.name=.\* -config api.addrs.addr.regex=true -config api.key=${ZAP_API_KEY}
    expose:
        - "${ZAP_EXPOSED_PORT}"
    ports:
      - "${ZAP_EXPOSED_PORT}:${ZAP_PORT}"
    volumes:
      - type: bind
        source: ./modules/zap/scripts/authentication
        target: /zap/scripts/custom
      - type: bind
        source: ./modules/zap/context_files
        target: /home/zap/.ZAP/context_files

  dvwa:
    image: vulnerables/web-dvwa:1.9

  worker_main:
    restart: unless-stopped
    build: .
    entrypoint: celery
    command: -A modules.task_queue.celery -b "redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}" --result-backend "redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}" worker -Q celery
    depends_on:
      - redis
    volumes:
      - type: bind
        source: ./logs
        target: /app/logs

  worker_logging:
    restart: unless-stopped
    build: .
    entrypoint: celery
    command: -A modules.task_queue.celery -b "redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}" --result-backend "redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}" worker -Q log_results -c 1
    depends_on:
      - redis
    volumes:
      - type: bind
        source: ./logs
        target: /app/logs

  worker_events:
    restart: unless-stopped
    build: .
    entrypoint: celery
    command: -A modules.task_queue.celery -b "redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}" --result-backend "redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}" worker -Q events_queue
    depends_on:
      - redis
    volumes:
      - type: bind
        source: ./logs
        target: /app/logs

  flower:
    restart: unless-stopped
    build: .
    image: mher/flower:2.0
    command: celery -A modules.task_queue.celery flower
    ports:
      - "${CELERY_FLOWER_EXPOSED_PORT}:${CELERY_FLOWER_PORT}"
    depends_on:
      - worker_main
      - worker_logging
      - redis

  redis:
    restart: unless-stopped
    image: redis:7.0.11
